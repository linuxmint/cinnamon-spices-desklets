1. PopupMenu Rules:

- PopupMenu needs a parent button with reactive: true
- PopupMenu.PopupBaseMenuItem is preferred over PopupMenuItem
- Use addActor() instead of add(), add_child() or actor.add()
- Don't use PopupMenuManager for simple popup menus
- Keep popup menu structure simple

2. Modal Dialog Rules:

- Use simple ModalDialog.ModalDialog() without custom styling initially
- Add elements directly to dialog.contentLayout
- Keep dialog structure minimal (title, entry, buttons)
- Handle both Enter and Escape keys explicitly
- Don't try to position modal dialog manually

3. Entry Rules:

- St.Entry needs reactive: true and can_focus: true
- Connect to clutter_text for key events
- Use stage.set_key_focus() to focus the entry
- Handle text changes directly on clutter_text
- Keep entry styling simple and compatible

4. Event Handling:

- Use button-press-event instead of clicked for buttons
- Return Clutter.EVENT_STOP to prevent event propagation
- Use Clutter.KEY_Return and Clutter.KEY_Escape for key constants
- Connect events before opening dialogs
- Handle both mouse and keyboard events

5. Layout Rules:

- Use x_expand and x_fill for flexible spacing
- Keep button boxes reactive
- Set proper padding and spacing
- Use consistent icon sizes
- Use St.Bin for simple containers

6. Timer and Resource Management Rules:

- Use GLib.SOURCE_REMOVE/CONTINUE for timer return values
- Clear timers in destroy handlers with Mainloop.source_remove()
- Implement adaptive refresh rates for periodic updates
- Use batch processing for heavy operations
- Track and limit concurrent operations
- Add resource usage monitoring

7. HTTP Request Rules:

- Set explicit timeout values for HTTP sessions
- Implement request caching headers
- Handle both Soup v2 and v3 APIs properly
- Limit concurrent requests with batch processing
- Clean up HTTP sessions on destroy

8. Memory Management Rules:

- Clear data structures explicitly on destroy
- Disconnect all signals using SignalManager
- Use Map for efficient key-value storage
- Implement cleanup handlers for components
- Clear references to unused objects

9. UI Performance Rules:

- Batch UI updates using GLib.idle_add()
- Create tooltips on-demand during hover
- Limit tooltip content size and complexity
- Use proper destroy_all_children() for cleanup
- Implement progressive loading for large lists

10. Error Handling Rules:

- Track error counts for adaptive behavior
- Log errors with meaningful context
- Implement fallback behaviors
- Clean up resources on error
- Use try-catch blocks for parsing operations

11. Tooltip Rules:

- Create tooltips lazily on hover
- Clean up tooltips when not needed
- Use markup sparingly in tooltips
- Set proper text wrapping modes
- Handle tooltip positioning automatically

12. Resource Monitoring Rules:

- Track update frequencies and timing
- Monitor error rates and types
- Implement adaptive delays
- Log resource usage patterns
- Clean up resources progressively
